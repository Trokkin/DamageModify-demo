package DamageModify
import DamageDetection
import LinkedList
import DamageType2
/*
	The system does not handle 0 damage events.
	
	Has several cases of possibly unexpected behavior:
	- Event Damage is set to .actualAmount, not .amount.
	- Actual amount can not go below zero.
	- Listeners are not notified of damage with actual amount equals to zero. 
	- Changes to Damage instance made in listeners or after the damage event are not considered.

	There will be output to debug stream if anything would go wrong,
	for example if system will fail to pass/catch Damage instance in between
	damage instance creation and it's handling (.deal() and .handle()).
	
	Examples:
	
	// Leech implementation #1
	function onLeechEffect1()
		let d = GetTriggerUnit().returnDamage(GetSpellTargetUnit(), LEECH_DAMAGE, true, 0)

		d.source.addHP(d.amount)
		d.source.addEffect(Abilities.vampiricAuraTarget, "origin").destr()

		d.releaseInstance()

	init
		registerSpellEffectEvent(LEECH_ID, function onLeechEffect1)

	// Leech implementation #2
	function onLeechEffect2()
		GetTriggerUnit().damage(GetSpellTargetUnit(), LEECH_DAMAGE, LEECH_ID)

	init
		registerSpellEffectEvent(LEECH_ID, function onLeechEffect2)
		addDamageListener() d ->
			if d.data == LEECH_ID	
				d.source.addHP(d.amount) // Leech effect implementation #2
				d.source.addEffect(Abilities.vampiricAuraTarget, "origin").destr()

	// Simple damage resistance buff

	function onBuffEffect()
		let target = GetSpellTargetUnit()
		let effect = target.addEffect(Abilities.voodooAuraTarget, "origin")
		let cb = addTargetDamageModifier() d ->
			d.amount -= d.initial * .5
		doAfter(BUFF_DURATION) ->
			removeTargetDamageModifier(cb)
			effect.destr()

	init
		registerSpellEffectEvent(BUFF_ID, function onLeechEffect2)
*/

/** If Damage instance wasn't created by one of DamageModify package's functions
	(or `new Damage(...)`), then Damage.data would be set to this value */
@configurable public constant DAMAGE_NONTRIGGERED_DATA = -1

/** Describes default way to create Damage instance if damage event doesn't
	correspond to any Damage instance. */
@configurable function getDamageFromEvent() returns Damage
	return new Damage(GetEventDamageSource(), GetTriggerUnit(), GetEventDamage(), false, false, getDamageType() == DamageType.SPELL ? ATTACK_TYPE_NORMAL : ATTACK_TYPE_CHAOS, null, null, DAMAGE_NONTRIGGERED_DATA)

/** Deals triggered damage from unit to target. Additional data can be specified.
	Damage instance with all arguments is saved and returned after being dealt,
	so don't forget to call .releaseInstance() on it.

	Is a helper for `new Damage(*args*)..saveInstance()..modify()..deal()` */
public function unit.damageTarget(unit target, real amount, bool attack, bool ranged, attacktype attackType, damagetype damageType, weapontype weaponType, int data) returns Damage
	return new Damage(this, target, amount, attack, ranged, attackType, damageType, weaponType, data)..saveInstance()..modify()..deal()

public function unit.damageTarget(unit target, real amount, attacktype attackType, int data) returns Damage
	return this.damageTarget(target, amount, false, false, attackType, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS, data)

public function unit.damageTarget(unit target, real amount, int data) returns Damage
	return this.damageTarget(target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS, data)

/** These callbacks are used to modify the damage.

	They can be called zero or more times, so that their call is not guaranteed
	for every instance, still the usual case is one time per instance. */
public interface DamageModifier
	function modify(Damage d)

/** These callbacks are used to listen to the damage.

	They are called strictly once per every damage instance, guaranteed,
	but they are disabled to modify. */
public interface DamageListener
	function listen(Damage d)

let damageModifiers = new LinkedList<DamageModifier>

let damageListeners = new LinkedList<DamageListener>

public function addDamageModifier(DamageModifier cb) returns DamageModifier
	damageModifiers.add(cb)
	return cb

public function removeDamageModifier(DamageModifier cb)
	damageModifiers.remove(cb)

public function addDamageListener(DamageListener cb) returns DamageListener
	damageListeners.add(cb)
	return cb

public function removeDamageListener(DamageListener cb)
	damageListeners.remove(cb)

public class Damage
	/** Should store source ability of the Damage.

		It is set in `new Damage` by user's value.
		Helper functions do set this to 0.

		If Damage instance wasn't created
		by one of DamageModify package's functions (or `new Damage(...)`),
		then this would be set to DAMAGE_NONTRIGGERED_DATA */
	integer data

	/** Who is dealing the damage */
	unit source

	/** Who is recieving the damage */
	unit target

	bool ranged
	bool attack
	attacktype attackType
	damagetype damageType
	weapontype weaponType

	function isSpell() returns bool
		return attackType == ATTACK_TYPE_NORMAL

	/** What amount of damage was originally convieved */
	real initial

	/** What amount of damage was/will be dealt to `target`.
	
		"amount of damage" == "amount of HP to remove" */
	real amount
	
	/** Allows manual creation of Damage instance, which is then dealt
		through .deal() call, guaranteed passing it to modifiers and listeners.

		Consider also .saveInstance() and .modify() before it's call.*/
	construct(unit _source, unit _target, real _amount, bool _ranged, bool _attack, attacktype _attackType, damagetype _damageType, weapontype _weaponType, int _data)
		source = _source
		target = _target
		initial = _amount
		amount = _amount
		ranged = _ranged
		attack = _attack
		attackType = _attackType
		damageType = _damageType
		weaponType = _weaponType
		data = _data

	protected real actualAmount = 0
	/** Returns the actual damage that was withdrawn from the unit.
		Becomes valid only for listeners and after the event. */
	function getActual() returns real
		return actualAmount

	/** Call this if you want to save the target.
		This means that target won't die from the damage,
		no matter how big `amount` would be */
	function preventDeath()
		doPreventDeath = true
	protected bool doPreventDeath = false

	/** Nullifies actual damage amount and stops it from being listened to. */
	function deflect()
		doDeflect = true
	protected bool doDeflect = false

	/** If damage instance was completely processed by system
		(modifiers, listeners and checks) */
	protected bool fired = false

	/** If the damage .deal() was already called */
	protected bool firing = false

	/** Increases `amount` of the damage by `initial * magnitude` */
	function addMultiplier(real magnitude)
		if not fired
			amount += initial * (magnitude - 1)

	/** Increases `amount` of the damage with given amount */
	function addAmount(real amount)
		if not fired
			this.amount += amount

	/** applies all modifiers to the damage instance once */
	function modify()
		if not fired
			for i in damageModifiers
				i.modify(this)

	/** It is set to true if the damage, when it was dealt, killed the target */
	protected bool killingBlow = false

	/** Returns true if the damage is going to kill or already have killed target */
	function isKillingBlow() returns bool
		return (fired and killingBlow) or (not fired and target.getHP() - .406 < amount)
			
	protected static Damage dealingInstance = null
	/** applies user-created Damage instance, allowing it to be retrieved
		through Damage.retrieve() funciton. */
	function deal()
		if not firing
			firing = true
			saveInstance()
			let temp = dealingInstance
			dealingInstance = this
			Log.trace("deal d" + I2S(this castTo int))
			UnitDamageTarget(source, target, amount, attack, ranged, attackType, damageType, weaponType)
			Log.trace("completed d" + I2S(this castTo int))
			dealingInstance = temp
			if not fired
				Log.debug("Damage.deal() has failed to pass the instance!")
				releaseInstance()
		else
			Log.debug("Damage.deal() called on already fired damage!")

	/** Damage instances are automatically destroyed.
		Use this to protect them if you need an instance anyhow.
		
		You need then to use `releaseInstance()`
		in order to destroy the instance.

		This means that the instance will be destroyed
		when the last `releaseInstance()` is called on it */
	function saveInstance()
		wantSave += 1

	/** Releases Damage instance so it can be destroyed.
		It is destroyed immediately if nobody else had saved it */
	function releaseInstance()
		wantSave -= 1
		if fired and wantSave <= 0
			destroy this

	/** The counter inside saveInstance() and releaseInstance() */
	protected int wantSave = 0
	ondestroy
		if wantSave > 0
			Log.error("Damage instance was unsafely destroyed! Use .releaseInstance() instead!")

	protected static Damage previousDamage = null
	/** Returns the damage instance that was created on last Damage event.
		For both listeners and modifiers it is previous to callback argument.

		Allows to retrieve the instance right after unit.damageTarget() call,
		but it is not guaranteed. */
	static function getPrevious() returns Damage
		return previousDamage

	static function retrieve() returns Damage
		var d = Damage.dealingInstance
		if d == null or d.source != GetEventDamageSource() or d.target != GetTriggerUnit()
			if d != null
				Log.debug("Damage.handler() was ignored a damage due to incorrect data!")
		else
			Damage.dealingInstance = null // let no one else retrieve the same instance
		return d

function handler() returns bool
	let damage = GetEventDamage()
	if damage == 0
		return false
	Log.trace("handler")
	var d = Damage.retrieve()
	if d == null
		d = getDamageFromEvent()..saveInstance()
			..modify() // So basically all non-triggered damage is modified once
		d.firing = true
	Log.trace("got d" + I2S(d castTo int))
	
	if d.doDeflect
		d.actualAmount = 0
	else
		let life = d.target.getHP()
		d.killingBlow = life - .406 < d.amount
		if d.killingBlow 
			if d.doPreventDeath
				d.killingBlow = false
				d.actualAmount = life - .406
			else
				d.actualAmount = life
		else
			d.actualAmount = d.amount

		if d.actualAmount < 0
			d.actualAmount = 0
	BlzSetEventDamage(d.actualAmount)

	for i in damageListeners
		i.listen(d)
	d.fired = true

	if Damage.previousDamage != null
		Damage.previousDamage.releaseInstance()
	Damage.previousDamage = d
	
	Log.trace("finish d" + I2S(d castTo int))
	return false

init
	addOnDamageFunc(Condition(function handler))
