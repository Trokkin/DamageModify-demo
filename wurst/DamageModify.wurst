package DamageModify
import AbilityObjEditing
import DamageDetection
import OnUnitEnterLeave
import ObjectIdGenerator
import LinkedList
import HashMap
/*
	DamageModify

	Never use both this and DamageType package.

	An important note:
	for damageListeners .amount is set to actual difference in target's life
	so damage won't be more than target's life if it has killed target (or it was saved)
	(a unit has 10 hp, it takes 100 damage, for damageModifiers it's 100 damage
	but for damageListeners it's 10 damage / 10 - .406 damage if .doPreventDeath == true)

	Changes to Damage instance made in listeners or after the damage event are not considered.

	Examples:
	
	// Leech implementation #1
	function onLeechEffect1()
		let d = GetTriggerUnit().returnDamage(GetSpellTargetUnit(), LEECH_DAMAGE, true, 0)

		d.source.addHP(d.amount)
		d.source.addEffect(Abilities.vampiricAuraTarget, "origin").destr()

		d.releaseInstance()

	init
		registerSpellEffectEvent(LEECH_ID, function onLeechEffect1)

	// Leech implementation #2
	function onLeechEffect2()
		GetTriggerUnit().damage(GetSpellTargetUnit(), LEECH_DAMAGE, LEECH_ID)

	init
		registerSpellEffectEvent(LEECH_ID, function onLeechEffect2)
		addDamageListener() d ->
			if d.id == LEECH_ID	
				d.source.addHP(d.amount) // Leech effect implementation #2
				d.source.addEffect(Abilities.vampiricAuraTarget, "origin").destr()

	// Simple damage resistance buff

	function onBuffEffect()
		let target = GetSpellTargetUnit()
		let effect = target.addEffect(Abilities.voodooAuraTarget, "origin")
		ForDamageCallback cb = () d ->
			d.amount -= d.initial * .5
		addTargetDamageModifier(cb)
		doAfter(BUFF_DURATION) ->
			removeTargetDamageModifier(cb)
			effect.destr()

	init
		registerSpellEffectEvent(BUFF_ID, function onLeechEffect2)
*/

/** Deals triggered damage from unit to target.
	You can specify id if there's any unique id interactions.
	Damage instance is saved and returned after being dealt.

	Is a helper for `new Damage(this, target, amount, spell, 0)..saveInstance()..modify()..deal()` */
public function unit.returnDamage(unit target, real amount, bool spell, int id) returns Damage
	return new Damage(this, target, amount, spell, id)..saveInstance()..modify()..deal()

/** If Damage instance wasn't created
	by one of DamageModify package's functions (or `new Damage(...)`),
	then Damage.id would be set to this value */
@configurable public constant DAMAGE_ID_NONTRIGGERED = -1

/** Essentially used for callback closures taking on the form Damage -> null */
public interface ForDamageCallback
	function run(Damage d)

let damageModifiers = new LinkedList<ForDamageCallback>

/** These callbacks adjust damage before it happens.

	Is called once by default, but for manually created
	damage it is possible to call zero or multiple times */
public function addDamageModifier(ForDamageCallback cb)
	damageModifiers.add(cb)

public function removeDamageModifier(ForDamageCallback cb)
	damageModifiers.remove(cb)

let damageListeners = new LinkedList<ForDamageCallback>

/** These callbacks are called right before the damage is dealt.

	Is called strictly once per damage instance */
public function addDamageListener(ForDamageCallback cb)
	damageListeners.add(cb)

public function removeDamageListener(ForDamageCallback cb)
	damageListeners.remove(cb)


let targetUniqueModifiers = new HashMap<unit, LinkedList<ForDamageCallback>>
/** Much more effective way to run unit-unique damageModifiers */
public function addTargetDamageModifier(unit u, ForDamageCallback cb)
	if not targetUniqueModifiers.has(u)
		targetUniqueModifiers.put(u, new LinkedList<ForDamageCallback>)
	targetUniqueModifiers.get(u).add(cb)

public function removeTargetDamageModifier(unit u, ForDamageCallback cb)
	var list = targetUniqueModifiers.get(u)
	if list != null
		list.remove(cb)
		if list.isEmpty()
			targetUniqueModifiers.remove(u)
			destroy list
			
let sourceUniqueModifiers = new HashMap<unit, LinkedList<ForDamageCallback>>
/** Much more effective way to run unit-unique damageModifiers */
public function addSourceDamageModifier(unit u, ForDamageCallback cb)
	if not sourceUniqueModifiers.has(u)
		sourceUniqueModifiers.put(u, new LinkedList<ForDamageCallback>)
	sourceUniqueModifiers.get(u).add(cb)

public function removeSourceDamageModifier(unit u, ForDamageCallback cb)
	var list = sourceUniqueModifiers.get(u)
	if list != null
		list.remove(cb)
		if list.isEmpty()
			sourceUniqueModifiers.remove(u)
			destroy list

let targetUniqueListeners = new HashMap<unit, LinkedList<ForDamageCallback>>
/** Much more effective way to run unit-unique damageListeners */
public function addTargetDamageListener(unit u, ForDamageCallback cb)
	if not targetUniqueListeners.has(u)
		targetUniqueListeners.put(u, new LinkedList<ForDamageCallback>)
	targetUniqueListeners.get(u).add(cb)

public function removeTargetDamageListener(unit u, ForDamageCallback cb)
	var list = targetUniqueListeners.get(u)
	if list != null
		list.remove(cb)
		if list.isEmpty()
			targetUniqueListeners.remove(u)
			destroy list
			
let sourceUniqueListeners = new HashMap<unit, LinkedList<ForDamageCallback>>
/** Th */
public function addSourceDamageListener(unit u, ForDamageCallback cb)
	if not sourceUniqueListeners.has(u)
		sourceUniqueListeners.put(u, new LinkedList<ForDamageCallback>)
	sourceUniqueListeners.get(u).add(cb)

public function removeSourceDamageListener(unit u, ForDamageCallback cb)
	var list = sourceUniqueListeners.get(u)
	if list != null
		list.remove(cb)
		if list.isEmpty()
			sourceUniqueListeners.remove(u)
			destroy list

// ConvertAttackType(7) is a hidden attack type with some unique properties.
// For more information see "goo.gl/9k8tn".
// Note that the values in the table at this link are outdated, but the principle still applies.
constant ATTACK_TYPE_UNIVERSAL = ConvertAttackType(7)
constant DAMAGE_TYPE_CHECK_ID = compiletime(ABIL_ID_GEN.next())
constant CHEAT_DEATH_ID = compiletime(ABIL_ID_GEN.next())

public class Damage
	/** Should store source ability of the Damage.

		It is set in `new Damage` by user's value.
		Helper functions do set this to 0.

		If Damage instance wasn't created
		by one of DamageModify package's functions (or `new Damage(...)`),
		then this would be set to DAMAGE_ID_NONTRIGGERED */
	integer id

	/** Who is dealing the damage */
	unit source

	/** Who is recieving the damage */
	unit target

	/** If the Damage is of ATTACK_TYPE_NORMAL */
	bool spell

	/** What amount of damage was originally convieved */
	real initial

	/** What amount of damage was/will be dealt to `target`.
	
		"amount of damage" == "amount of HP to remove" */
	real amount
		
	construct(unit source, unit target, real amount, bool isSpell, int id)
		this.source = source
		this.target = target
		this.initial = amount
		this.amount = amount
		spell = isSpell
		this.id = id

	/** Call this if you want to save the target.
		This means that target won't die from the damage,
		no matter how big `amount` would be */
	function preventDeath()
		doPreventDeath = true
	protected bool doPreventDeath = false

	/** Returns true if the damage is going to kill or already have killed target */
	function isKillingBlow() returns bool
		return killingBlow or (not fired and target.getHP() - .406 < amount)

	/** It is set to true if the damage, when it was dealt, killed the target */
	protected bool killingBlow = false
		
	/** Increases `amount` of the damage by `initial * magnitude` */
	function addMultiplier(real magnitude)
		if not fired
			amount += initial * (magnitude - 1)

	/** Increases `amount` of the damage with given amount */
	function addAmount(real amount)
		if not fired
			this.amount += amount

	/** applies all modifiers to the damage instance once */
	function modify()
		for i in damageModifiers
			i.run(this)

	protected static Damage dealingInstance = null
	/** applies user-created Damage instance */
	function deal()
		if not fired
			let temp = dealingInstance
			dealingInstance = this
			source.damageTarget(target, initial, spell ? ATTACK_TYPE_NORMAL : ATTACK_TYPE_CHAOS)
			dealingInstance = temp
			if not fired
				Log.warn("Damage.deal() has failed to pass the instance!")
		else
			Log.warn("Damage.deal() called on already fired damage!")

	/** Damage instances are automatically destroyed.
		Use this to protect them if you need an instance anyhow.
		
		You need then to use `releaseInstance()`
		in order to destroy the instance.

		This means that the instance will be destroyed
		when the last `releaseInstance()` is called on it */
	function saveInstance()
		wantSave += 1

	/** Releases Damage instance so it can be destroyed.
		It is destroyed immediately if nobody else had saved it */
	function releaseInstance()
		wantSave -= 1
		if fired and wantSave <= 0
			destroy this

	/** The counter inside saveInstance() and releaseInstance() */
	protected int wantSave = 0
	ondestroy
		if wantSave > 0
			Log.error("Damage instance was unsafely destroyed! Use .releaseInstance() instead!")

	/** If the damage was already dealt */
	private bool fired = false

	/** Runs all damageListeners */
	protected function notify()
		for i in damageListeners
			i.run(this)
		fired = true

function handler() returns bool
	let damage = GetEventDamage()
	if damage == 0
		return false

	var d = Damage.dealingInstance
	if d == null or d.source != GetEventDamageSource() or d.target != GetTriggerUnit() or damage < 0 != d.spell
		d = new Damage(GetEventDamageSource(), GetTriggerUnit(), (damage < 0 ? -damage : damage), damage < 0, DAMAGE_ID_NONTRIGGERED)
		d.modify()
	else
		d.amount = (damage < 0 ? -damage : damage)
		Damage.dealingInstance = null
	d.saveInstance()

	let life = d.target.getHP()
	d.killingBlow = life - .406 < d.amount
	if d.killingBlow 
		if d.doPreventDeath
			d.killingBlow = false
			d.amount = life - .406
		else
			d.amount = life

	BlzSetEventDamage(d.amount)
	
	d.notify()

	d.releaseInstance()
	return false

init
	onEnter() ->
		getEnterLeaveUnit()..addAbility(DAMAGE_TYPE_CHECK_ID)..makeAbilityPermanent(DAMAGE_TYPE_CHECK_ID, true)
	addOnDamageFunc(Condition(function handler))

@compiletime function generateAbility()
	new AbilityDefinitionRunedBracers(DAMAGE_TYPE_CHECK_ID)
		..setName("Runed Bracer Dummy")
		..setEditorSuffix("(DamageType)")
		..setItemAbility(false)
		..setDamageReduction(1, 2.)

init
	addDamageModifier() d ->
		if targetUniqueModifiers.has(d.target)
			for cb in targetUniqueModifiers.get(d.target)
				cb.run(d)
		if sourceUniqueModifiers.has(d.source)
			for cb in sourceUniqueModifiers.get(d.source)
				cb.run(d)
	addDamageListener() d ->
		if targetUniqueListeners.has(d.target)
			for cb in targetUniqueListeners.get(d.target)
				cb.run(d)
		if sourceUniqueListeners.has(d.source)
			for cb in sourceUniqueListeners.get(d.source)
				cb.run(d)
	onLeave() ->
		targetUniqueModifiers.remove(getEnterLeaveUnit())
		sourceUniqueModifiers.remove(getEnterLeaveUnit())
		targetUniqueListeners.remove(getEnterLeaveUnit())
		sourceUniqueListeners.remove(getEnterLeaveUnit())