// Use this package for finding the damage type in the context of a
// DamageDetection handler. Typically this means differentiating between spells
// and basic attacks.
package DamageType2
import TimerUtils
import AbilityObjEditing
import DamageDetection
import OnUnitEnterLeave
import ObjectIdGenerator

public enum DamageType
	NULLED
	ATTACK
	SPELL
	CODE

@configurable var useBonusCalculator = false


// ConvertAttackType(7) is a hidden attack type with some unique properties. For
// more information see goo.gl/9k8tn .
constant ATTACK_TYPE_UNIVERSAL = ConvertAttackType(7)
constant DAMAGE_TYPE_CHECK_ID  = compiletime(ABIL_ID_GEN.next())

var lastDamageType = DamageType.NULLED

DamageType array dtstack
int dtstack_counter = 0
int dtstack_decay = 0
bool dtstack_reset = false
public function DamageType.toString() returns string
	switch this
		case NULLED
			return "NULLED"
		case ATTACK
			return "ATTACK"
		case SPELL
			return "SPELL"
		case CODE
			return "CODE"
		default
			return "-"
/** In the context of a damage detection handler, get the type of damage dealt.
	Returns one of:

		DamageType.CODE
		DamageType.ATTACK
		DamageType.SPELL
		DamageType.NULLED
		
	Brokes after .damageTarget invokation within same event.

	Be sure that if you use the `DamageType` package, that all subscribers of
	`DamageDetection` also `import DamageType`, or you may experience race
	conditions.

	Example Usage:

		import DamageDetection
		import DamageType

		init
			addOnDamageFunc() ->
				switch getDamageType()
					case ATTACK
						print(GetEventDamageSource().getName() + " attacked " + GetTriggerUnit().getName())
					case SPELL
						print(GetEventDamageSource().getName() + " used a spell on " + GetTriggerUnit().getName())
					default
*/
public function getDamageType() returns DamageType
	return dtstack[dtstack_counter]

function determineDamageType() returns DamageType
	let sourceDamage = GetEventDamage()
	if lastDamageType == DamageType.CODE
		return DamageType.CODE
	else if sourceDamage > 0.
		return DamageType.ATTACK
	else if sourceDamage < 0.
		return DamageType.SPELL

	return DamageType.NULLED


/** Deal an exact amount of damage to `target`, crediting kill experience and
	gold bounty to `attacker`.

	Be sure that if you use the `DamageType` package, that all subscribers of
	`DamageDetection` also `import DamageType`, or you may experience race
	conditions. */
public function dealCodeDamage(unit attacker, unit target, real damage)
	let prevType   = lastDamageType
	let hp		 = target.getHP() - .405
	lastDamageType = DamageType.CODE

	if hp > damage
		target.setHP(hp - damage + .405)
		UnitDamageTarget(attacker, target, 0. , true, false, ATTACK_TYPE_UNIVERSAL, DAMAGE_TYPE_UNIVERSAL, null)
	else
		// Deal damage using two separate components. The ATTACK_TYPE_UNIVERSAL
		// case will deal damage to units of all armor types, even if that armor
		// would otherwise block all damage. The ATTACK_TYPE_MAGIC case affect
		// ethereal units, whereas other attack types do not.
		UnitDamageTarget(attacker, target, 1000000. + damage, true, false, ATTACK_TYPE_UNIVERSAL, DAMAGE_TYPE_UNIVERSAL, null)
		UnitDamageTarget(attacker, target, 1000000. + damage, true, false, ATTACK_TYPE_MAGIC,     DAMAGE_TYPE_UNIVERSAL, null)

	lastDamageType = prevType

function after()
	dtstack_counter -= dtstack_decay
	dtstack_decay = 0
	dtstack_reset = false

	GetExpiredTimer().release()
	
function getUnitBonusSpellResistance(unit u) returns real
	let prevType = lastDamageType
	let life     = u.getHP()
	var scale    = u.getMaxHP()

	u.setHP(scale)
	lastDamageType = CODE
	UnitDamageTarget(u, u, -scale/2., false, false, null, DAMAGE_TYPE_UNIVERSAL, null)
	scale = 2.*(scale - u.getHP())/scale
	u.setHP(life)

	lastDamageType = prevType
	return scale


// This is the method that will invert any negative spell damage. To function
// properly, it *must* be the first handler in the DamageDetection handlers. To
// ensure this, simply import DamageType in any package where you also import
// DamageDetection (so long as you require the DamageType feature).
function handler() returns bool
	dtstack_counter += 1
	dtstack[dtstack_counter] = determineDamageType()
	dtstack_decay += 1

	if not dtstack_reset
		getTimer().start(0., function after)
		dtstack_reset = true

	if getDamageType() == DamageType.SPELL
		var attemptedDamage = -1.*GetEventDamage()
		let tU			  = GetTriggerUnit()

		if useBonusCalculator
			let scale = getUnitBonusSpellResistance(tU)

			if scale > 1.
				attemptedDamage = attemptedDamage*(scale + 1.)/2.

		BlzSetEventDamage(attemptedDamage)

	return false


init
	dtstack[0] = DamageType.NULLED
	onEnter(() -> getEnterLeaveUnit()..addAbility(DAMAGE_TYPE_CHECK_ID)..makeAbilityPermanent(DAMAGE_TYPE_CHECK_ID, true))
	addOnDamageFunc(Condition(function handler))

@compiletime function generateAbility()
	new AbilityDefinitionRunedBracers(DAMAGE_TYPE_CHECK_ID)
		..setName("Runed Bracer Dummy")
		..setEditorSuffix("(DamageType)")
		..setItemAbility(false)
		..setDamageReduction(1, 2.)
